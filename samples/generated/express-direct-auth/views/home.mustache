<!DOCTYPE html>
<html lang="en">
  <head>
    {{>head}}
  </head>
  <body id="samples">

    {{>menu}}

    <div id="content" class="ui container padded grid relaxed">
      <div id="doc" class="column eight wide">
        <div class="doc-overview text container">

          <h2 class="ui dividing header" data-se="overview-doc-header">
            Direct Auth + Express JS Example
          </h2>

          {{^isLoggedIn}}
            <p>Hello!</p>
            <p>If you're viewing this page then you have successfully configured this example server.  Your server configuration is listed on the right.</p>
            <p>
              This example shows you how to use the <a href="https://github.com/okta/okta-oidc-js/tree/master/packages/oidc-middleware">Okta OIDC Middleware Library</a>
              and the <a href="https://github.com/okta/okta-signin-widget">Okta Sign In Wiget</a> to add the <a href="https://developer.okta.com/authentication-guide/implementing-authentication/auth-code">Authorization Code Flow</a> to your application.
            </p>
            <p>
              This combination is useful when you want to leverage the features of the Sign-In Widget, and the session creation features of the OIDC Middleware Library.
            </p>

          {{/isLoggedIn}}

          {{#isLoggedIn}}
            <p>Welcome back, {{userinfo.name}}!</p>
            <p>You have successfully authenticated against your Okta org, and have been redirected back to this application.  Here are some cool things to know:</p>
            <ul>
              <li>The <a href="https://github.com/okta/okta-oidc-js/tree/master/packages/oidc-middleware">Okta OIDC Middleware Library</a> library has created a local cookie session for you, to persist your authentication.</li>
              <li>The session contains the information retrieved from the <a href="https://developer.okta.com/docs/api/resources/oidc#get-user-information">User Info Endpoint</a> of the configured issuser. This information is automatically persisted for you, and can be read from <code>req.userContext.userinfo</code></li>
              <li>Visit the <a href="/profile">My Profile</a> page in this application to see an example of using this data.</li>
            </ul>
            <p></p>
          {{/isLoggedIn}}

          {{^isLoggedIn}}
            <form method="get" action="/signin">
              <button id="signin-button" class="ui primary button" type="submit">Sign In</button>
            </form>
            <p>Don't have an account?</p>
            <form method="get" action="/signup">
              <button id="signup-button" class="ui secondary button" type="submit">Sign Up</button>
            </form>
          {{/isLoggedIn}}
        </div>
      </div>

      {{>server-config}}

    </div>
  </body>
</html>
